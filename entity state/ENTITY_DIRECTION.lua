local ENTITY_DIRECTION = {}

require '/misc/BinaryTree'

ENTITY_DIRECTION.DIRECTION_MAP = {
	{2,1,8},
	{3,0,7},
	{4,5,6}
}

ENTITY_DIRECTION.UP = 1
ENTITY_DIRECTION.UP_LEFT = 2
ENTITY_DIRECTION.LEFT = 3
ENTITY_DIRECTION.DOWN_LEFT = 4
ENTITY_DIRECTION.DOWN = 5
ENTITY_DIRECTION.DOWN_RIGHT = 6
ENTITY_DIRECTION.RIGHT = 7
ENTITY_DIRECTION.UP_RIGHT = 8

ENTITY_DIRECTION.DEGREE_TO_DIRECTION_MAP = BinaryTree.new()
ENTITY_DIRECTION.DEGREE_TO_DIRECTION_MAP:buildTree({math.rad(202.5), math.rad(247.5), 
	math.rad(292.5), math.rad(337.5), math.rad(0) , math.rad(22.5), math.rad(67.5), 
	math.rad(112.5), math.rad(157.5)})
ENTITY_DIRECTION.DEGREE_TO_DIRECTION_MAP:storeValueInLeaf(math.rad(202), ENTITY_DIRECTION.LEFT)
ENTITY_DIRECTION.DEGREE_TO_DIRECTION_MAP:storeValueInLeaf(math.rad(247), ENTITY_DIRECTION.DOWN_LEFT)
ENTITY_DIRECTION.DEGREE_TO_DIRECTION_MAP:storeValueInLeaf(math.rad(292), ENTITY_DIRECTION.DOWN)
ENTITY_DIRECTION.DEGREE_TO_DIRECTION_MAP:storeValueInLeaf(math.rad(337), ENTITY_DIRECTION.DOWN_RIGHT)
ENTITY_DIRECTION.DEGREE_TO_DIRECTION_MAP:storeValueInLeaf(math.rad(359), ENTITY_DIRECTION.RIGHT)
ENTITY_DIRECTION.DEGREE_TO_DIRECTION_MAP:storeValueInLeaf(math.rad(158), ENTITY_DIRECTION.LEFT)
ENTITY_DIRECTION.DEGREE_TO_DIRECTION_MAP:storeValueInLeaf(math.rad(113), ENTITY_DIRECTION.UP_LEFT)
ENTITY_DIRECTION.DEGREE_TO_DIRECTION_MAP:storeValueInLeaf(math.rad(68), ENTITY_DIRECTION.UP)
ENTITY_DIRECTION.DEGREE_TO_DIRECTION_MAP:storeValueInLeaf(math.rad(23), ENTITY_DIRECTION.UP_RIGHT)
ENTITY_DIRECTION.DEGREE_TO_DIRECTION_MAP:storeValueInLeaf(math.rad(1), ENTITY_DIRECTION.RIGHT)

function ENTITY_DIRECTION:getDirection(rotation)
	return self.DEGREE_TO_DIRECTION_MAP:getValue(rotation)
end

return ENTITY_DIRECTION